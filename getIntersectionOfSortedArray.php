<?php

// Поиск пересечения двух неотсортированных массивов — операция, в рамках которой 
// выполняется вложенный цикл с полной проверкой каждого элемента первого массива на вхождение во второй.

// Сложность данного алгоритма O(n * m) (произведение n и m), где n и m — размерности массивов. Если массивы отсортированы, то можно реализовать алгоритм, сложность которого уже O(n + m), что значительно лучше.


// Реализуйте функцию getIntersectionOfSortedArray, которая принимает на вход два отсортированных массива и находит их пересечение.

// Алгоритм
// Суть алгоритма довольно проста. В коде вводятся два указателя (индекса) на каждый из массивов. Начальное значение каждого указателя 0. Затем идёт проверка элементов, находящихся под этими индексами в обоих массивах. Если они совпадают, то значение заносится в результирующий массив, а оба индекса инкрементируются. Если значение в первом массиве больше, чем во втором, то инкрементируется указатель второго массива, иначе первого.

// Примеры

// getIntersectionOfSortedArray([10, 11, 24], [10, 13, 14, 18, 24, 30]); // [10, 24]

// getIntersectionOfSortedArray([10, 11, 24], [-2, 3, 4]); // []

// getIntersectionOfSortedArray([], [2]); // []
// Подсказки
// Для данной задачи хорошо подходит цикл do..while.
// Не забудьте поставить проверку на размерность массивов. Если хотя бы один из них пустой, то пересечений нет.

//=========================================================================================
//=========================================================================================
//=========================================================================================


//=======================================MY SOLUTION ==================================================

// BEGIN (write your solution here)
function getIntersectionOfSortedArray($arr1, $arr2){
    $result = [];
    if(count($arr1) == 0 || count($arr2) == 0) {
        return $result;
    }
    
    $length1 = count($arr1);
    $length2 = count($arr2);
    $i = 0;
    $j = 0;
    
    do {
       
        if($arr1[$i] == $arr2[$j]){
            $result[] = $arr1[$i];
            $i++;
            $j++;
        } else if ($arr1[$i] > $arr2[$j]) {
            $j++;
        } else if ($arr1[$i] < $arr2[$j]) {
            $i++;
        }
        if ($i >= $length1) {
            break;
        }
        if ($j >= $length2) {
            break;
        }
         
        
    } while (1);
   return $result;
}
// END

//=======================================MY SOLUTION ==================================================


//=======================================Teacher SOLUTION ==================================================
function getIntersectionOfSortedArray($arr1, $arr2){
    // BEGIN
    $size1 = count($arr1);
    $size2 = count($arr2);

    if ($size1 == 0 || $size2 == 0) {
        return [];
    }

    $i1 = 0;
    $i2 = 0;
    $result = [];
    do {
        if ($arr1[$i1] == $arr2[$i2]) {
            $result[] = $arr1[$i1];
            $i1++;
            $i2++;
        } elseif ($arr1[$i1] > $arr2[$i2]) {
            $i2++;
        } else {
            $i1++;
        }
    } while ($i1 < $size1 && $i2 < $size2);

    return $result;
    // END
}
//=======================================Teacher SOLUTION ==================================================


